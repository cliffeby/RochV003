{
	"info": {
		"name": "Roch",
		"_postman_id": "38221d20-aa87-b035-9d26-cdb08e7d66fb",
		"description": "# Introduction\nCRUD operations for four endpoints accessing a MongoDB database. \n\n# Overview\nThese tests hit the DEV Mongo dataset - mean-dev04.  Unless interrupted, all data POSTed is DELETEd.\n\n# Authentication\nAuth0 is used for authentication.  Test accounts (email and password) are housed at roch.auth0.com.  Test emails are:\n1.  admin@roch.com\n2.  player@roch.com\n3.  member@roch.com\nEndpoints use JWT authorization with \"scopes\" passed to users in three categories - Admin, Player, and Member.  Password is Password.\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-login",
			"description": "",
			"item": [
				{
					"name": "Unauthorized Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Show Unauthorized\"] = responseCode.code === 400 || responseCode.code === 401;",
									"",
									"",
									"tests[\"Show 'invalid JWT token' error\"] = responseBody === 'invalid JWT token...' ||",
									"responseBody.includes('jwt malformed');",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearGlobalVariables();",
									"postman.clearEnvironmentVariables();",
									"postman.setEnvironmentVariable(\"url\", \"http://localhost:3000/api/\");",
									"",
									"postman.setEnvironmentVariable(\"auth0_domain\", \"roch.auth0.com\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "audience",
								"value": "http://localhost:4200/home"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n    \"name\": \"April Fool Judy and Billy1\",\n    \n    \n    \"cap\": \"33\"\n   \n    \n    \n}"
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Unauthorized Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Show Unauthorized\"] = responseCode.code === 400 || responseCode.code === 401;",
									"",
									"",
									"tests[\"Show 'invalid JWT token' error\"] = responseBody === 'invalid JWT token...' ||",
									"responseBody.includes('jwt malformed');",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearGlobalVariables();",
									"postman.clearEnvironmentVariables();",
									"postman.setEnvironmentVariable(\"url\", \"localhost:3000/api\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "audience",
								"value": "http://localhost:4200/home"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n    \"name\": \"April Fool Judy and Billy1\",\n    \n    \n    \"cap\": \"33\"\n   \n    \n    \n}"
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Unauthorized Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Show Unauthorized\"] = responseCode.code === 400 || responseCode.code === 401;",
									"",
									"",
									"tests[\"Show 'invalid JWT token' error\"] = responseBody === 'invalid JWT token...' ||",
									"responseBody.includes('jwt malformed');;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "audience",
								"value": "http://localhost:4200/home"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n    \"name\": \"April Fool Judy and Billy1\",\n    \n    \n    \"cap\": \"33\"\n   \n    \n    \n}"
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"description": "Authenticate using Auth0 and its local database connection.  Successful authentication returns a JWT access-token with appropriate scopes.\n\nReturned access-token is stored globally and other data is stored in the Roch0 environment.",
			"item": [
				{
					"name": "Login as {{data.username}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Successful Login request\"] = responseCode.code === 200 || responseCode.code === 201;",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"access_token\", jsonData.access_token);",
									"postman.setGlobalVariable(\"id_token\", jsonData.id_token);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"auth0_domain\", \"roch.auth0.com\");",

									"postman.setEnvironmentVariable(\"url\", \"http://localhost:3000/api/\");",
									"postman.setEnvironmentVariable(\"pathScores\", \"scores\");",
									"postman.setEnvironmentVariable(\"urlPath\", \"scores\");",
									"postman.setEnvironmentVariable(\"pathMembers\", \"members\");",
									"postman.setEnvironmentVariable(\"pathScorecards\", \"scorecards\");",
									"postman.setEnvironmentVariable(\"pathMatches\", \"matches\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text",
									"description": ""
								},
								{
									"key": "client_id",
									"value": "9E3q7XC0qIfGdCgoLehJRhFoKKNstSIo",
									"type": "text",
									"description": ""
								},
								{
									"key": "audience",
									"value": "http://localhost:4200/home",
									"type": "text",
									"description": ""
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text",
									"description": ""
								},
								{
									"key": "connection",
									"value": "Username-Password-Authentication",
									"type": "text",
									"description": ""
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text",
									"description": ""
								}
							]
						},
						"url": {
							"raw": "https://{{auth0_domain}}/oauth/token",
							"protocol": "https",
							"host": [
								"{{auth0_domain}}"
							],
							"path": [
								"oauth",
								"token"
							]
						},
						"description": "This is the OAuth 2.0 grant that highly trusted apps utilize in order to access an API. In this flow the end-user is asked to fill in credentials (username/password) typically using an interactive form. This information is later on sent to the Client and the Authorization Server. It is therefore imperative that the Client is absolutely trusted with this information.\n\n\"audience\": \"http://localhost:4200/home\""
					},
					"response": []
				},
				{
					"name": "Return a user's email and role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"console.log(\"Your are a - \", jsonData.app_metadata.roles);",
									"",
									"if (jsonData.app_metadata.roles == 'admin'){",
									"    tests[\"You are an admin\"] = true;",
									"    postman.setEnvironmentVariable(\"role\", jsonData.app_metadata.roles);",
									"}",
									"",
									"if (jsonData.app_metadata.roles == 'player'){",
									"    tests[\"You are a player\"] = true;",
									"    postman.setEnvironmentVariable(\"role\", jsonData.app_metadata.roles);",
									"}",
									"",
									"if (jsonData.app_metadata.roles == 'member'){",
									"    tests[\"You are a member\"] = true;",
									"    postman.setEnvironmentVariable(\"role\", jsonData.app_metadata.roles);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id_token",
									"value": "{{id_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{auth0_domain}}/tokeninfo",
							"protocol": "https",
							"host": [
								"{{auth0_domain}}"
							],
							"path": [
								"tokeninfo"
							]
						},
						"description": "Validates a JSON Web Token (signature and expiration) and returns the user information associated with the user id (sub property) of the token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Scores",
			"description": "",
			"item": [
				{
					"name": "Create a new score",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseBody.includes(\"Insufficient\")=== true){",
									"    tests[\"You are not an admin.  No authorization to create a score\"] = true;",
									"    tests[\"Returns- 401 (Unauthorized)\"] = responseCode.code === 401",
									"    postman.setEnvironmentVariable(\"scoreId\", \"58e93fe3295262a819df627f\"); //dummy ID",
									"}",
									"",
									"else {",
									"var jsonData = JSON.parse(responseBody);",
									"console.log(\"RB\",responseBody);",
									"",
									"",
									"if (postman.getEnvironmentVariable(\"role\") === 'admin'){",
									"    tests[\"You are an admin\"] = true;",
									"",
									"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 201 || responseCode.code === 202;",
									"tests[\"Response time is less than 300ms\"] = responseTime < 500;",
									"",
									"tests[\"id is Present\"] = responseBody.has(\"id\");",
									"tests[\"user Present\"] = responseBody.has(\"user\");",
									"tests[\"matchId is Present\"] = responseBody.has(\"matchId\");",
									"tests[\"memberId is Present\"] = responseBody.has(\"memberId\");",
									"tests[\"wonIndo is Present\"] = responseBody.has(\"wonIndo\");",
									"tests[\"wonOneBall is Present\"] = responseBody.has(\"wonOneBall\");",
									"tests[\"wonTwoBall is Present\"] = responseBody.has(\"wonTwoBall\");",
									"tests[\"name is Present\"] = responseBody.has(\"name\");",
									"tests[\"cap is Present\"] = responseBody.has(\"cap\");",
									"tests[\"created is Present\"] = responseBody.has(\"created\");",
									"tests[\"foursomeIds is Present\"] = responseBody.has(\"foursomeIds\");",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    ",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"string\" },",
									"                    \"user\": { \"type\": \"string\" },",
									"                    \"matchId\": { \"type\": \"string\" },",
									"                    \"memberId\": { \"type\": \"string\" },",
									"                    \"cap\": { \"type\": \"string\" },",
									"                    \"wonIndo\": { \"type\": \"boolean\" },",
									"                    \"wonOneBall\": { \"type\": \"boolean\" },",
									"                    \"wonTwoBall\": { \"type\": \"boolean\" },",
									"                    \"created\": { \"type\": \"string\" },",
									"                    \"name\": { \"type\": \"string\" },",
									"                    \"foursomesIds\": { \"type\": [\"string\"] }",
									"              ",
									"    }",
									"};",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Valid schema\"] = tv4.validate(data, schema);",
									"console.log('DATA', data, tv4.error);",
									"postman.setEnvironmentVariable(\"scoreId\", data._id);",
									"",
									"}",
									"",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "audience",
								"value": "http://localhost:4200/home"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"name\": \"TEST - Postman\",\n        \"matchId\": \"58e1e32d4fb9c270337a6dc7\",\n        \"memberId\": \"58d60df0c2c0304804aa17fe\",\n        \"user\": \"58afd0948462ac0e9cd8bf30\",\n        \"datePlayed\": \"2017-04-01T07:00:00.000Z\",\n        \"cap\": 16,\n        \"partnerId\": \"58c59648418efafc258955e1\",\n        \"wonIndo\": false,\n        \"wonOneBall\": false,\n        \"wonTwoBall\": false,\n        \"foursomeIds\": [\n            \"58c59648418efafc258955e1\",\n            \"58b3a7cb4d03ed15382d0c09\",\n            \"58bef746f9fe3b18e80059ac\"\n        ]\n    }"
						},
						"url": {
							"raw": "{{url}}{{pathScores}}",
							"host": [
								"{{url}}{{pathScores}}"
							]
						},
						"description": "Score data are not manually entered.  Object_ids reference members and matches.  These _ids are not \"populated.\"\n\nPOST a new Score.  \n- Check DateCreated posts\n- Cap is a number"
					},
					"response": []
				},
				{
					"name": "Update this score",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseBody.includes(\"Insufficient\")=== true){",
									"    tests[\"You are not an admin.  No authorization to update a score\"] = true;",
									"    tests[\"Returns- 401 (Unauthorized)\"] = responseCode.code === 401",
									"}",
									"",
									"else {",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Successful PUT by ID request\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Name contains TEST\"] = jsonData.name.includes(\"TEST\");",
									"tests[\"Name contains Billy\"] = jsonData.name.includes(\"Billy\");",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "audience",
								"value": "http://localhost:4200/home"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"name\": \"TEST - Postman Billy\",\n        \"matchId\": \"58e1e32d4fb9c270337a6dc8\",\n        \"cap\": \"69\"\n    }"
						},
						"url": {
							"raw": "{{url}}{{pathScores}}/{{scoreId}}",
							"host": [
								"{{url}}{{pathScores}}"
							],
							"path": [
								"{{scoreId}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get all scores",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Successful GET ALL request\"] = responseCode.code === 200 || responseCode.code === 201",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "audience",
								"value": "http://localhost:4200/home"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n    \"name\": \"April Fool Judy and Billy1\",\n    \n    \n    \"cap\": \"33\"\n   \n    \n    \n}"
						},
						"url": {
							"raw": "{{url}}{{pathScores}}",
							"host": [
								"{{url}}{{pathScores}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get this score",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Member and Player roles\r",
									"var x = postman.getEnvironmentVariable(\"scoreId\")\r",
									"if ( x === \"58e93fe3295262a819df627f\") {\r",
									"    tests[\"No score created.  \"] = true;\r",
									"}\r",
									"//Admin role\r",
									"else {\r",
									"tests[\"Successful GET ID request\"] = responseCode.code === 200 || responseCode.code === 201\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"console.log(jsonData);\r",
									"\r",
									"tests[\"Id was found\"] =responseBody!=\"null\";\r",
									"\r",
									"try{\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Name contains TEST\"] = jsonData.name.includes(\"TEST\");\r",
									"tests[\"Name contains Billy\"] = jsonData.name.includes(\"Billy\");\r",
									"}\r",
									"catch(err)\r",
									"{\r",
									"    console.log(\"ResponseBody is null\", err);\r",
									"}\r",
									"}\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}{{pathScores}}/{{scoreId}}",
							"host": [
								"{{url}}{{pathScores}}"
							],
							"path": [
								"{{scoreId}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ID not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"\r",
									"tests[\"StatusCode 404 for not found\"] = responseCode.code === 404 \r",
									"\r",
									"\r",
									"try{\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Id not found.  Body is null\"] =responseBody === \"null\";\r",
									"}\r",
									"catch(err)\r",
									"{\r",
									"    console.log(\"ResponseBody is null\", err);\r",
									"}\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}{{pathScores}}/zzzzzzzzzzzz",
							"host": [
								"{{url}}{{pathScores}}"
							],
							"path": [
								"zzzzzzzzzzzz"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete this score",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseBody.includes(\"Insufficient\")=== true){\r",
									"    tests[\"You are not an admin.  No authorization to delete a score\"] = true;\r",
									"    tests[\"Returns- 401 (Unauthorized)\"] = responseCode.code === 401\r",
									"}\r",
									"\r",
									"else {\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"console.log(\"RB\",responseBody);\r",
									"\r",
									"\r",
									"if (postman.getEnvironmentVariable(\"role\") === 'admin'){\r",
									"    tests[\"You are an admin\"] = true;\r",
									"\r",
									"tests[\"Successful GET ID request\"] = responseCode.code === 200 || responseCode.code === 201\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"console.log(jsonData);\r",
									"\r",
									"tests[\"Id was found\"] =responseBody!=\"null\";\r",
									"\r",
									"try{\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Deleted Name contained TEST\"] = jsonData.name.includes(\"TEST\");\r",
									"tests[\"Deleted Name contained Billy\"] = jsonData.name.includes(\"Billy\");\r",
									"}\r",
									"catch(err)\r",
									"{\r",
									"    console.log(\"ResponseBody is null\", err);\r",
									"}\r",
									"}\r",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}{{pathScores}}/{{scoreId}}",
							"host": [
								"{{url}}{{pathScores}}"
							],
							"path": [
								"{{scoreId}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}
